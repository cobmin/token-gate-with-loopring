@using BlazeRing.Client.Models;
@using BlazeRing.Shared;
@using System.Text;
@using WalletConnectSharp.Core.Models.Pairing;
@using WalletConnectSharp.Sign.Models;
@using WalletConnectSharp.Sign.Models.Engine;
@using WalletConnectSharp.Sign;
@using QRCoder;
@using WalletConnectSharp.Storage;
@inject JsService JsService
@inject HttpClient Http

@if (string.IsNullOrEmpty(accountAddress))
{
    <button type="button" class="btn btn-primary" @onclick="Connect">@connectStatus</button>
    @if (!string.IsNullOrEmpty(base64Image))
    {
        <div class="qr-modal">
            <img src="@base64Image" width="256" height="256" alt="Wallet QR Code" />
            <p>Scan this QR Code using your Loopring Smart Wallet</p>
            <button class="btn btn-secondary" @onclick="CloseQrModal">Close</button>
        </div>
    }
}
else
{
    if (apiKey == null)
    {
        <button type="button" class="btn btn-primary" @onclick="Unlock">@unlockStatus</button>
    }
    else if (apiKey != null)
    {
        <button type ="button" class="btn btn-primary" @onclick="(async () => await Disconnect())">Disconnect</button>
    }
}

@code {
    private string? accountAddress;
    private AccountInformation? accountInformation;
    private ApiKey? apiKey;
    private NftAssets? userNftAssets;
    private string? base64Image;

    private string? connectStatus = "Connect with WalletConnect";
    private string? unlockStatus = "Unlock";

    private WalletConnectSignClient? dappClient;
    private ConnectedData? connectData;
    private SessionStruct? sessionData;
    public event Action<WalletConnectionEventArgs> OnWalletConnected;

    private async Task Connect()
    {
        try
        {
            var dappOptions = new SignClientOptions()
                {
                    ProjectId = "fe0f51ef24ee2d0540819ab45474460c",
                    Metadata = new Metadata()
                    {
                        Description = "How to Token Gate with Loopring NFTs and Crypto",
                        Icons = new[] { "https://github.com/cobmin/token-gate-with-loopring/assets/97369738/b4a81c27-b170-46ae-8755-1274896cfbd2" },
                        Name = "LoopLock",
                        Url = "https://looplock.cobmin.com/"
                    },
                    Storage = new InMemoryStorage()
                };

            var dappConnectOptions = new ConnectOptions()
                {
                    RequiredNamespaces = new RequiredNamespaces()
                    {
                        {
                            "eip155", new ProposedNamespace()
                            {
                                Methods = new[]
                                {
                                    "eth_sendTransaction",
                                    "eth_signTransaction",
                                    "eth_sign",
                                    "personal_sign",
                                    "eth_signTypedData"
                                },
                                Chains = new[]
                                {
                                    "eip155:1"
                                },
                                Events = new[]
                                {
                                    "chainChanged",
                                    "accountsChanged",
                                }
                            }
                        }
                    }
                };

            connectStatus = "Connecting...";
            if(dappClient == null)
            {
                dappClient = await WalletConnectSignClient.Init(dappOptions);
            }
            connectData = await dappClient.Connect(dappConnectOptions);
            QRCodeGenerator qrGenerator = new QRCodeGenerator();
            QRCodeData qrCodeData = qrGenerator.CreateQrCode(connectData.Uri, QRCodeGenerator.ECCLevel.Q);
            PngByteQRCode qrCode = new PngByteQRCode(qrCodeData);
            byte[] qrCodeAsPngByteArr = qrCode.GetGraphic(20);

            var base64QRCode = Convert.ToBase64String(qrCodeAsPngByteArr);
            base64Image = $"data:image/png;base64,{base64QRCode}";
            StateHasChanged();
            sessionData = await connectData.Approval;
            var selectedNamespace = sessionData?.Namespaces["eip155"];
            if (selectedNamespace != null && selectedNamespace.Accounts.Length > 0)
            {
                var currentSession = selectedNamespace.Accounts[0];
                var parameters = currentSession.Split(':');
                accountAddress = parameters[2];
            }

            if (!string.IsNullOrEmpty(accountAddress))
            {
                var accountInformationEndpoint = $"{BlazeRingConstants.ApiUrl}/{BlazeRingConstants.GetAccountInformationApiEndpoint}?owner={accountAddress}";
                accountInformation = await Http.GetFromJsonAsync<AccountInformation>(accountInformationEndpoint);
                base64Image = null;
                connectStatus = "Connected...";
            }
        }
        catch (Exception ex)
        {
            base64Image = null;
            connectStatus = "Rejected...try again";
            dappClient = null;
            connectData = null;
            sessionData = null;
            accountAddress = null;
            Console.WriteLine($"Error: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task Unlock()
    {
        try
        {
            unlockStatus = "Waiting for signature...";
            StateHasChanged();
            if(string.IsNullOrEmpty(accountInformation.keySeed))
            {
                accountInformation.keySeed = $"Sign this message to access Loopring Exchange: 0x0BABA1Ad5bE3a5C0a66E7ac838a129Bf948f1eA4 with key nonce: {accountInformation.keyNonce - 1}";
            }

            var request = new PersonalSign( new string[] { BlazeRingHelper.StringToHex(accountInformation.keySeed), accountAddress,"" } );
            var response = await dappClient.Request<PersonalSign, string>(sessionData?.Topic, request);
            unlockStatus = "Unlocking...";
            StateHasChanged();
            var xApiSig = await BlazeRingHelper.GenerateXApiSigHeader(response + "02", accountInformation.owner, accountInformation.accountId);
            unlockStatus = "Requesting API Key...";
            StateHasChanged();
            Http.DefaultRequestHeaders.Remove("x-api-sig"); // remove x-api-sig if it exists already
            Http.DefaultRequestHeaders.Add("x-api-sig", xApiSig);
            var getApiKeyEndpoint = $"{BlazeRingConstants.ApiUrl}/{BlazeRingConstants.GetApiKeyEndpoint}?accountId={accountInformation.accountId}";
            apiKey = await Http.GetFromJsonAsync<ApiKey>(getApiKeyEndpoint);

            if (apiKey != null && accountInformation != null)
            {
                var args = new WalletConnectionEventArgs
                    {
                        AccountInfo = accountInformation,
                        ApiKey = apiKey
                    };
                OnWalletConnected?.Invoke(args);
            }
        }
        catch (Exception ex)
        {
            unlockStatus = "Rejected signing...Try Again!";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void CloseQrModal()
    {
        base64Image = null;
    }

    private async Task Disconnect()
    {
        connectData = null;
        sessionData = null;
        accountAddress = null;
        accountInformation = null;
        apiKey = null;
        unlockStatus = "Unlock";
        connectStatus = "Connect";
        StateHasChanged();
    }

}