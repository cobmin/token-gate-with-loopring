@using BlazeRing.Shared;
@inject EthereumService EthereumService
@inject HttpClient Http

@if(string.IsNullOrEmpty(accountAddress))
{
    <button @onclick="Connect">@connectStatus</button>
}
else
{
    <button @onclick="Unlock">@unlockStatus</button>
    @if (apiKey != null)
    {
        <p>Your api key is @apiKey.apiKey</p>
    }
}

@code {
    private string? accountAddress;
    private AccountInformation? accountInformation;
    public string? connectStatus = "Connect with Browser Wallet";
    private string? unlockStatus = "Unlock";
    private ApiKey? apiKey;
    private async Task Connect()
    {
        try
        {
            accountAddress = await EthereumService.GetAccountAddress();
            if(!string.IsNullOrEmpty(accountAddress))
            {
                var accountInformationEndpoint = $"{BlazeRingConstants.ApiUrl}/{BlazeRingConstants.GetAccountInformationApiEndpoint}?owner={accountAddress}";
                accountInformation = await Http.GetFromJsonAsync<AccountInformation>(accountInformationEndpoint);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task Unlock()
    {
        try
        {
            unlockStatus = "Waiting for signature...";
            StateHasChanged();
            var signedEcdsaMessage = await EthereumService.SignMessage(accountInformation!.keySeed!);
            unlockStatus = "Unlocking...";
            StateHasChanged();         
            var xApiSig = await BlazeRingHelper.GetApiKeyEDDSASig(signedEcdsaMessage,accountInformation.owner,accountInformation.accountId);
            unlockStatus = "Requesting API Key...";
            StateHasChanged();
            Http.DefaultRequestHeaders.Add("x-api-sig", xApiSig);
            var getApiKeyEndpoint = $"{BlazeRingConstants.ApiUrl}/{BlazeRingConstants.GetApiKeyEndpoint}?accountId={accountInformation.accountId}";
            apiKey = await Http.GetFromJsonAsync<ApiKey>(getApiKeyEndpoint);
            unlockStatus = "Unlocked...";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            unlockStatus = "Rejected signing...Try Again!";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}