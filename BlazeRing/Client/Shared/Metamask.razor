@using BlazeRing.Shared;
@inject EthereumService EthereumService
@inject HttpClient Http

@if(string.IsNullOrEmpty(accountAddress))
{
    <button @onclick="Connect">Connect with MetaMask</button>
}
else
{
    <button @onclick="Unlock">@unlockStatus</button>
}

@code {
    private string? accountAddress;
    private AccountInformation? accountInformation;
    private string? unlockStatus = "Unlock";
    private async Task Connect()
    {
        try
        {
            accountAddress = await EthereumService.GetAccountAddress();
            if(!string.IsNullOrEmpty(accountAddress))
            {
                var loopringApiEndpoint = $"{BlazeRingConstants.ApiUrl}/{BlazeRingConstants.AccountInformationApiEndpoint}?owner={accountAddress}";
                accountInformation = await Http.GetFromJsonAsync<AccountInformation>(loopringApiEndpoint);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task Unlock()
    {
        try
        {
            unlockStatus = "Waiting for signature...";
            StateHasChanged();
            var signedMessage = await EthereumService.SignMessage(accountInformation!.keySeed!);
            unlockStatus = "Unlocking...";
            StateHasChanged();
            var apiSig = BlazeRingHelpers.GetApiKeyEDDSASig(signedMessage, accountInformation.owner, accountInformation.accountId);
            unlockStatus = "Unlocked...";
            StateHasChanged();
            Console.WriteLine(apiSig);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}